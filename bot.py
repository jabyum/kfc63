from telebot import TeleBot
from buttons import *
import database as db
from geopy import Photon
bot = TeleBot(token="TOKEN")
# db.add_product("–ß–∏–∫–µ–Ω–±—É—Ä–≥–µ—Ä", 30000.0, "–≤–∫—É—Å–Ω–∞—è –∫—É—Ä–æ—á–∫–∞ –≤ –±—É–ª–æ—á–∫–µ", 10, "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTYO_gzNUj6uWpQZRLLTQSb_tGBrLZaUV-Uew&s")
# db.add_product("–î–∞–±–ª–±—É—Ä–≥–µ—Ä", 50000.0, "–¥–≤–µ –≤–∫—É—Å–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã –≤ –±—É–ª–æ—á–∫–µ", 10, "https://d2j6dbq0eux0bg.cloudfront.net/images/14450072/1156014693.jpg")
# db.add_product("–•–æ—Ç-–¥–æ–≥", 20000.0, "—Å–æ—Å–∏—Å–∫–∞ –≤ –±—É–ª–æ—á–∫–µ", 0, "https://d2j6dbq0eux0bg.cloudfront.net/images/14450072/1156014693.jpg")
# –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ {user_id:{pr_id, pr_name, pr_count, pr_price}}
users = {}
# –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –ª–æ–∫–∞—Ü–∏–µ–π
geolocator = Photon(user_agent="geo-locator", timeout=10)
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    checker = db.check_user(user_id)
    if checker == True:
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_bt())
    elif checker == False:
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏!\n"
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
        bot.register_next_step_handler(message, get_name)
def get_name(message):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(user_id, f"–û—Ç–ª–∏—á–Ω–æ, {name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä",
                     reply_markup=phone_number_bt())
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–º–µ–Ω–∏
    bot.register_next_step_handler(message, get_phone, name)
# –ø—Ä–∏–Ω–∏–º–∞—é —ç—Ç–æ –∏–º—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä name
def get_phone(message, name):
    user_id = message.from_user.id
    if message.contact:
        phone_number = message.contact.phone_number
        db.add_user(user_id, name, phone_number)
        bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {name}!\n"
                                  f"–í–∞—à –Ω–æ–º–µ—Ä: {phone_number}")
        # bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é", reply_markup=location_bt())
        # bot.register_next_step_handler(message, get_location)
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.",
                         reply_markup=phone_number_bt())
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, –ø–æ–∫–∞ –æ–Ω –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        bot.register_next_step_handler(message, get_phone, name)
def get_location(message):
    user_id = message.from_user.id
    if message.location:
        # –ø–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É
        longitude = message.location.longitude
        latitude = message.location.latitude
        # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∞–¥—Ä–µ—Å
        address = geolocator.reverse((latitude, longitude)).address
        bot.send_message(user_id, f"–í–∞—à –∞–¥—Ä–µ—Å: {address}")
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é",
                         reply_markup=location_bt())
        bot.register_next_step_handler(message, get_location)
@bot.callback_query_handler(lambda call: call.data in ["back", "cart",
                                                       "plus", "minus", "to_cart",
                                                       "back_product", "cart",
                                                       "order", "clear_cart"])
def calls(call):
    user_id = call.message.chat.id
    if call.data == "back":
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_bt())
    elif call.data == "plus":
        current_amount = users.get(user_id).get("pr_count")
        users[user_id]["pr_count"] += 1
        bot.edit_message_reply_markup(user_id, call.message.message_id,
                                      reply_markup=plus_minus_in("plus", current_amount))
    elif call.data == "minus":
        current_amount = users.get(user_id).get("pr_count")
        if current_amount > 1:
            users[user_id]["pr_count"] -= 1
            bot.edit_message_reply_markup(user_id, call.message.message_id,
                                          reply_markup=plus_minus_in("minus", current_amount))
    elif call.data == "to_cart":
        db.add_to_cart(user_id, users.get(user_id).get("pr_id"),
                       users.get(user_id).get("pr_name"),
                       users.get(user_id).get("pr_price"),
                       users.get(user_id).get("pr_count"))
        users.pop(user_id)
        bot.delete_message(user_id, call.message.message_id)
        all_products = db.get_products_id_name()
        bot.send_message(user_id, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ? ",
                         reply_markup=all_products_in(all_products))
    elif call.data == "back_product":
        bot.delete_message(user_id, call.message.message_id)
        all_products = db.get_products_id_name()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ",
                         reply_markup=all_products_in(all_products))
    elif call.data == "cart":
        bot.delete_message(user_id, call.message.message_id)
        cart = db.get_user_cart(user_id)
        full_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        count = 0
        total_price = 0
        for product in cart:
            count += 1
            full_text += f"{count}. {product[0]} x {product[1]} = {product[2]} —Å—É–º\n"
            total_price += product[2]
        full_text += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} —Å—É–º"
        bot.send_message(user_id, full_text, reply_markup=cart_in())
    elif call.data == "clear_cart":
        db.delete_user_cart(user_id)
        bot.delete_message(user_id, call.message.message_id)
        all_products = db.get_products_id_name()
        bot.send_message(user_id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–∫–∞–∑–∞—Ç—å?: ",
                         reply_markup=all_products_in(all_products))
    elif call.data == "order":
        bot.delete_message(user_id, call.message.message_id)
        cart = db.get_user_cart(user_id)
        full_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç —é–∑–µ—Ä–∞ {user_id}:\n"
        count = 0
        total_price = 0
        for product in cart:
            count += 1
            full_text += f"{count}. {product[0]} x {product[1]} = {product[2]} —Å—É–º\n"
            total_price += product[2]
        full_text += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} —Å—É–º"
        bot.send_message(-4789605501, full_text, reply_markup=user_info_in(user_id))
        db.delete_user_cart(user_id)
        bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                         reply_markup=main_menu_bt())

@bot.callback_query_handler(lambda call: "info_" in call.data)
def get_user_info(call):
    user_id = call.message.chat.id
    info_id = int(call.data.replace("info_", ""))
    info = db.get_user_info(info_id)
    bot.answer_callback_query(call.id, text=f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {info[0]}\n"
                                            f"–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {info[1]}")

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@bot.callback_query_handler(lambda call: "delete_" in call.data)
def delete_prod_from_cart(call):
    bot.edit_message_text()
    # —É–¥–∞–ª–µ–Ω–∏–µ + —Å–µ–Ω–¥_–º–µ—Å—Å–µ–¥–∂
    ...

@bot.callback_query_handler(lambda call: "prod_" in call.data)
def get_prod_info(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)
    pr_id = int(call.data.replace("prod_", ""))
    product_info = db.get_exact_product(pr_id)
    #pr_name, pr_price, pr_desc, pr_photo
    # –ø–µ—Ä–µ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    users[user_id] = {"pr_id": pr_id, "pr_name": product_info[0], "pr_count": 1,
                      "pr_price": product_info[1]}
    bot.send_photo(user_id, photo=product_info[3], caption=f"{product_info[0]}\n"
                                                           f"–¶–µ–Ω–∞: {product_info[1]}\n"
                                                           f"–û–ø–∏—Å–∞–Ω–∏–µ: {product_info[2]}\n",
                   reply_markup=plus_minus_in())
@bot.message_handler(content_types=["text"])
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
def text_func(message):
    user_id = message.from_user.id
    text = message.text
    if text == "üç¥–ú–µ–Ω—é":
        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
        all_products = db.get_products_id_name()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ",
                        reply_markup=all_products_in(all_products))
    elif text == "üõí–ö–æ—Ä–∑–∏–Ω–∞":
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: ")
    elif text == "‚úç–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤: ")
        bot.register_next_step_handler(message, send_feedback)
    elif text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        bot.send_message(user_id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
def send_feedback(message):
    user_id = message.from_user.id
    admin_id = -4789605501
    bot.send_message(admin_id, f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç —é–∑–µ—Ä–∞ —Å ID {user_id}:\n\n"
                               f"{message.text}")
bot.infinity_polling()